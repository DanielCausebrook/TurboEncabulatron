{type: "chain", data: [
  {type: "random-weighted", data: [
    [20, ''],
    [2, 'turbo-', 'hyper-', 'meta-', 'double-', 'reverse-', 'electric ', 'hydraulic ', 'manual ', 'rotary ', 'precision ', ],
    [1 ,'quantum ', 'laser ', 'safety ', 'high-voltage ', 'high-speed ', 'robotic ', ],
  ]},
  '|',
  {type: 'random-weighted', data: [
    [10, ''],
    [1, 're', 'un', 'de', 'retro', 'super', 'sub', 'con', 'circum', 'auto', 'contra', 'trans', 'dis', 'exo', 'inter', 'mega', 'aero', 'ambi', 'mono', 'multi', 'synchro'],
  ]},
  {type: 'random-weighted', data: [
    [7 , ''],
    [1, '|en'],
  ]},
  '|', // Prefix separator
  {type: 'random', data: [
    // '~' After a vowel signifies it has to be a long vowel.
    'baffl', 'bant', 'bash', 'beam', 'bee~p', 'bi~nd', 'blast', 'blend', 'blip', 'bonk', 'bug', 'buzz', 'burn', 'bust', 'cab', 'clonk', 'crank', 'crack', 'crash', 'disc', 'drill', 'dri~v', 'duct', 'duck', 'dunk', 'energ', 'fa~c', 'fab', 'form', 'frazzl', 'fu~s', 'grad', 'gram', 'gy~r', 'ject', 'mod', 'mo~t', 'nai~l', 'lash', 'loca~t', 'magn', 'pact', 'pel', 'plo~d', 'press', 'puck', 'puls', 'quack', 'rust', 'scan', 'shred', 'sink', 'skel', 'skim', 'slap', 'slam', 'spect', 'spond', 'struct', 'swat', 'tank', 'tack', 'tact', 'tend', 'track', 'tract', 'trash', 'turb', 'volt', 'vort', 'warp', 'whack', 'wham', 'whizz', 'woo~f', 'wrangl', 'zap', 'zing',
    // Rejects: 'du~c', 'pi~l', 'rot',
  ]},
  {type: 'random-weighted', data: [
    [11, ''],
    [1, '&u~la~t', '&o', '&et',],
  ]},
  '&', // Suffix boundary marker
  {type: 'random-weighted', data: [
    [3, 'er',],
    [2, 'tor', 'ifier', 'tron',],
    [1, 'on', 'ter', 'ton', 'meter', 'matic',],
    // Rejects: 'iser', 'ler', 'lon', 'lor', 'or', 'ron',
  ]},
  '#', // Word end marker
  {type: 'random-weighted', data: [
    [37, ''],
    [1, ' 3000', ' 5000', ' 8000', ' X', {type: 'random', data:[' MK1', ' MK2',  ' MK3', ' MK4', ' MK5']}],
  ]},
  {type: "replace", data: [
    // De-double letters on suffix boundary
    ['([^aeiou])([a-zA-Z])&\\2+', '$1$2&'],
    // De-double letters on suffix boundary
    ['([^m])&\\1+', '$1&'],
    // Prevent repeated vowels on suffix boundary
    ['([aeiouy]&)+([aeiouy])', '&$2'],

    // Remove repeated boundary markers
    ['\\|+', '|'],
    ['&&+', '&'],

    // Word end
    ['([^aeiouy][^aeiouy])&([rt][eo][rn])(&|#)', '$1&a&$2$3'],
    ['m&(t[eo][rn])(&|#)', 'mp&$1$2'],
    ['b&(t[eo][rn])(&|#)', 'p&$1$2'],
    ['g&(t[eo][rn])(&|#)', 'c&$1$2'],
    ['d&(t[eo][rn])(&|#)', 'd&a&$1$2'],
    ['([^aeiouy][bmpt]|[vz])&(l[oe][rnt]#)', {
      type: 'random', data: [
        '$1&a&$2', '$1&o&$2', '$1&i&$2', '$1&u&$2'
      ]
    }],
    ['([^l][^aeioy])&met', '$1&omet'],
    ['scer#', 'cer#'],
    ['(d|[fgz]l|ct|gn|rk|yr|m|v|z)&(tron#|matic#)', {
      type: 'random', data: [
        '$1&a&$2', '$1&o&$2', '$1&o&$2',
      ]
    }],
    ['([~]t)&(matic#)', {
      type: 'random', data: [
        '$1&a$2', '$1&o$2', '$1&o$2',
      ]
    }],

    // Double most consonants (root only)
    ['(\\|[^|&#]*[^aeiou&][aeiou])([bcdfghjklmnpqrstvwz])&(l?e[lr]|l?o[lnr]|[aeiouy])(#|&)', '$1$2$2&$3$4'],
    // Double some x's
    ['(vax|dox)&(l?er|l?o[nr]|[aeiouy])(#|&)', '$1x&$2$3'],

    // Remove suffix boundary marker
    ['&', ''],
    // Remove word end marker
    ['#', ''],

    // Prefixes

    // Remove en if it would cause a hyphen (to minimise hyphens)
    ['([aeiouy]|er)\\|en\\|', '$1|'],
    ['\\|(e|co)n\\|(p|b)', '|$1m|$2'],

    ['x\\|?z', 'xoz'],

    // Hyphenate separated double letters
    // ['([^s])\\|\\1', '$1-$1'],
    // Hyphenate separated double vowels
    ['([aeiouy])\\|([aeiouy])', '$1-$2'],
    // Remove prefix separators
    ['\\|', ''],
    // De-triple all letters
    ['([a-zA-Z])\\1{2,}', '$1$1'],

    // Remove long vowel signifier
    ['~', ''],

    // No swears
    ['bugger', 'bungler'],
  ]},
  {type: 'capitalise'}
]}